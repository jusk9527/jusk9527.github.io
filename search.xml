<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>supervisor 使用技巧</title>
      <link href="2021/02/03/hello-world/"/>
      <url>2021/02/03/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前后台经常这样启动一个程序</p><pre class="line-numbers language-none"><code class="language-none">nohup your-program &amp; &gt; nohup.log &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现这样这样非常不好易于管理, 在使用<strong>supervisor</strong>之后,发现有以下<strong>优点</strong></p><ol><li>可以将非后台运行程序后台运行</li><li>自动监控，重启进程</li><li>方便集成多个程序一起管理</li></ol><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="http://supervisord.org/">Supervisor</a>是一个客户端/服务器系统，它允许用户在类unix操作系统上控制多个进程</p><h4 id="supervisor主要包含以下四个部分"><a href="#supervisor主要包含以下四个部分" class="headerlink" title="supervisor主要包含以下四个部分"></a>supervisor主要包含以下四个部分</h4><ul><li><strong>supervisord</strong>：这个是supervisor服务的主要<strong>管理器</strong>，负责管理我们配置的子进程，包括重启崩溃或异常退出的子进程，同时也响应来自客户端的请求</li><li><strong>supervisorctl</strong>：supervisord服务的<strong>客户端命令行</strong>。听过这个，我们可以获得由主进程控制的子进程的状态，停止和启动子进程，并获得主进程的运行列表。<br><img src="https://cdn.jsdelivr.net/gh/jusk9527/images/data/20210226113425.png"><br><img src="https://cdn.jsdelivr.net/gh/jusk9527/images/data/20210226114140.png"></li><li><strong>Web Server</strong>：和supervisorctl功能娉美。这个是通过web界面查看和控制进程状态。<br><img src="https://cdn.jsdelivr.net/gh/jusk9527/images/data/20210226113107.png"></li><li><strong>XML-RPC Interface</strong>：服务于web UI的同一个HTTP服务器提供一个XML-RPC接口，可以用来询问和控制管理程序及其运行的程序</li></ul><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><p>supervisor可以运行在大多数类UNIX系统，但是不能运行在任何windows系统，Supervisor运行在python3版本3.4或更高版本以及python2版本2.7上工作。</p><h3 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h3><ul><li>查看python 版本</li></ul><pre class="line-numbers language-none"><code class="language-none">python -VPython 2.7.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果python 版本低于2.6 的话</li></ul><pre class="line-numbers language-none"><code class="language-none">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y libffi-develwget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.6.8&#x2F;Python-3.6.8.tar.xztar xf Python-3.6.8.tar.xzcd Python-3.6.8.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python368make &amp;&amp; make installecho &#39;export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;python368&#x2F;bin:$PATH&#39; &gt;&gt; &#x2F;etc&#x2F;profilesource &#x2F;etc&#x2F;profilepython3 -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 pip 来安装，前提要保证pip版本大于2.6</li></ul><pre class="line-numbers language-none"><code class="language-none">sudo pip install supervisor# 可能你会收到类似的报错：Supervisor requires Python 2.4 or later but does not work on any version of Python 3.  You are using version 3.4.3 (default, Oct 28 2017, 20:59:04)# 可以手动安装新版 Supervisor，它支持 Python3：pip install git+https:&#x2F;&#x2F;github.com&#x2F;Supervisor&#x2F;supervisor# 设置环境变量：vim ~&#x2F;.bash_profile在后面补充： PATH&#x3D;$PATH:$HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;python&#x2F;binsource ~&#x2F;.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-none"><code class="language-none">echo_supervisord_conf &gt; &#x2F;etc&#x2F;supervisord.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开配置文件：</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;supervisord.conf[unix_http_server]file&#x3D;&#x2F;tmp&#x2F;supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用;chmod&#x3D;0700                 ; socket 文件的 mode，默认是 0700;chown&#x3D;nobody:nogroup       ; socket 文件的 owner，格式： uid:gid;username&#x3D;user              ; default is no username (open server);password&#x3D;123               ; default is no password (open server);[inet_http_server]         ; HTTP 服务器，提供 web 管理界面;port&#x3D;127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性;username&#x3D;user              ; 登录管理后台的用户名;password&#x3D;123               ; 登录管理后台的密码[supervisord]logfile&#x3D;&#x2F;tmp&#x2F;supervisord.log ; 日志文件，默认是 $CWD&#x2F;supervisord.loglogfile_maxbytes&#x3D;50MB        ; 日志文件大小，超出会 rotate，默认 50MBlogfile_backups&#x3D;10           ; 日志文件保留备份数量默认 10loglevel&#x3D;info                ; 日志级别，默认 info，其它: debug,warn,tracepidfile&#x3D;&#x2F;tmp&#x2F;supervisord.pid ; pid 文件nodaemon&#x3D;false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动minfds&#x3D;1024                  ; 可以打开的文件描述符的最小值，默认 1024minprocs&#x3D;200                 ; 可以打开的进程数的最小值，默认 200; the below section must remain in the config file for RPC; (supervisorctl&#x2F;web interface) to work, additional interfaces may be; added by defining them in separate rpcinterface: sections[rpcinterface:supervisor]supervisor.rpcinterface_factory &#x3D; supervisor.rpcinterface:make_main_rpcinterface[supervisorctl]serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致;serverurl&#x3D;http:&#x2F;&#x2F;127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord;包含其他的配置文件[include]files &#x3D; relative&#x2F;directory&#x2F;*.ini    ; 可以是 *.conf 或 *.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置管理的进程"><a href="#配置管理的进程" class="headerlink" title="配置管理的进程"></a>配置管理的进程</h4><pre class="line-numbers language-none"><code class="language-none">vim supervisord.conf# 找到最后一行，并取消注释和添加：[include]files &#x3D; &#x2F;etc&#x2F;supervisor&#x2F;*.conf$ mkdir &#x2F;etc&#x2F;supervisor$ cd &#x2F;etc&#x2F;suervisor$ vim Djnago.conf# 填入以下内容：[program:Djagno]command&#x3D;&#x2F;root&#x2F;.virtualenvs&#x2F;xxx&#x2F;bin&#x2F;gunicorn xxx.wsgi:application -b 0.0.0.0:8004  ; 被监控的进程路径  ; 被监控的进程路径directory&#x3D;&#x2F;mnt&#x2F;hao&#x2F;server&#x2F;               ; 执行前要不要先cd到目录$autostart&#x3D;true                ; 随着supervisord的启动而启动autorestart&#x3D;true              ; 自动重启。。当然要选上了startretries&#x3D;10               ; 启动失败时的最多重试次数exitcodes&#x3D;0                   ; 正常退出代码stopsignal&#x3D;KILL               ; 用来杀死进程的信号stopwaitsecs&#x3D;10               ; 发送SIGKILL前的等待时间redirect_stderr&#x3D;true          ; 重定向stderr到stdoutstdout_logfile&#x3D;..&#x2F;..&#x2F;log&#x2F;django&#x2F;django.log                      ；输出日志stderr_logfile&#x3D;..&#x2F;..&#x2F;log&#x2F;django&#x2F;django.log                       ; 错误日志; 默认为 false，如果设置为 true，当进程收到 stop 信号时，会自动将该信号发给该进$stopasgroup&#x3D;true             ; send stop signal to the UNIX process; 默认为 false，如果设置为 true，当进程收到 kill 信号时，会自动将该信号发给该进$killasgroup&#x3D;true             ; SIGKILL the UNIX process group (def false)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里说明下: <strong>environment</strong>没啥用。<strong>command</strong> 里面写好环境比较好</p><h4 id="启动-Supervisor"><a href="#启动-Supervisor" class="headerlink" title="启动 Supervisor"></a>启动 Supervisor</h4><p>Supervisor 有两个主要的组成部分：</p><ol><li>supervisord，运行 Supervisor 时会启动一个进程 supervisord，它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启</li><li>supervisorctl，是命令行管理工具，可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。</li></ol><pre class="line-numbers language-none"><code class="language-none">supervisord -c &#x2F;etc&#x2F;supervisord.conf                                   # 固定配置文件夹启动supervisorctl -c &#x2F;etc&#x2F;supervisord.conf status                     # 查看状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>命令参数意义可参考上面 <strong>supervisor主要包含以下四个部分</strong></li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li>在启动 supervisorctl 的时候可能会接受到 refuse connection 的报错，解决办法：</li></ol><pre class="line-numbers language-none"><code class="language-none"># 找到 supervisor.sock 的地址$ find &#x2F; -name supervisor.sock# unlink 掉它，*** 换成真实地址$ unlink &#x2F;***&#x2F;supervisor.sock&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>还遇到了另外一个问题，在 supervisor 运行一段时间后，web 端会访问不了，在后台企图通过 supervisorctl -c /etc/supervisord.conf 登录，发现还是报 refuse connection 的错误，还有<pre class="line-numbers language-none"><code class="language-none">Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>尝试将[supervisorctl] 里面的属性 serverurl 修改成 unix 前缀，如 unix:///tmp/supervisord.sock，过一段时间再做观察。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li><a href="https://my.oschina.net/goskyblue/blog/380828">https://my.oschina.net/goskyblue/blog/380828</a></li><li><a href="https://zhuanlan.zhihu.com/p/36459081">https://zhuanlan.zhihu.com/p/36459081</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
